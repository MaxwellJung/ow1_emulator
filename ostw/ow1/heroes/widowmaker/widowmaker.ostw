rule: "[widowmaker.opy]: Initialize Widowmaker"
Event.OngoingPlayer
Player.Widowmaker
# without this flag, the reset code in generic.opy executes after initialization
if (call_init == true)
{
    Wait(1, WaitBehavior.IgnoreCondition);
    applyCustomHealth(OW1_WIDOWMAKER_HEALTH, 0, 0);
    if (MaxHealth(EventPlayer()) != OW1_WIDOWMAKER_HEALTH)
    {
        clearCustomHealth();
        Loop();
    }
}

rule: "[widowmaker.opy]: Revert sniper damage falloff"
Event.OnDamageDealt
Player.Widowmaker
if (IsFiringSecondary(EventPlayer()) == true)
if (IsFiringPrimary(EventPlayer()) == true)
if (EventAbility() == Button.PrimaryFire)
{
    scoped_shot_distance = DistanceBetween(EyePosition(Attacker()), Victim());
    ow2_scoped_damage_falloff_scalar = (scoped_shot_distance - 40) / 20 * 0.5 + 1 - (scoped_shot_distance - 40) / 20;
    # Cap min/max scalar\r\n Max damage scalar
    if (ow2_scoped_damage_falloff_scalar > 1)
    {
        ow2_scoped_damage_falloff_scalar = 1;
    }
    else if (ow2_scoped_damage_falloff_scalar < 0.5)
    {
        ow2_scoped_damage_falloff_scalar = 0.5;
    }
    scoped_damage_base = EventDamage() / ow2_scoped_damage_falloff_scalar;
    ow1_scoped_damage_falloff_scalar = (scoped_shot_distance - 70) / 30 * 0.3 + 1 - (scoped_shot_distance - 70) / 30;
    # Cap min/max scalar\r\n Max damage scalar
    if (ow1_scoped_damage_falloff_scalar > 1)
    {
        ow1_scoped_damage_falloff_scalar = 1;
    }
    else if (ow1_scoped_damage_falloff_scalar < 0.3)
    {
        ow1_scoped_damage_falloff_scalar = 0.3;
    }
    expected_scoped_damage = scoped_damage_base * ow1_scoped_damage_falloff_scalar;
    Damage(Victim(), Attacker(), expected_scoped_damage - EventDamage());
}
