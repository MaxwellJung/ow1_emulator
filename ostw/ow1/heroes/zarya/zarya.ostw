rule: "[zarya/hp.opy]: Initialize Zarya HP"
Event.OngoingPlayer
Player.Zarya
# without this flag, the reset code in generic.opy executes after initialization
if (call_init == true)
{
    Wait(1, WaitBehavior.IgnoreCondition);
    applyCustomHealth(OW1_ZARYA_HEALTH, 0, OW1_ZARYA_SHIELDS);
    if (MaxHealth(EventPlayer()) != OW1_ZARYA_HEALTH + OW1_ZARYA_SHIELDS)
    {
        clearCustomHealth();
        Loop();
    }
}

rule: "[zarya/self_bubble.opy]: Initialize self bubble ability"
Event.OngoingPlayer
Player.Zarya
# without this flag, the reset code in generic.opy executes after initialization
if (call_init == true)
{
    self_bubble_cooldown = 0;
}

rule: "[zarya/self_bubble.opy]: Remove self bubble HUD"
Event.OngoingPlayer
if (last_hero_played == Hero.Zarya)
if (call_reset == true)
{
    hideSelfBubbleCD();
}

void showSelfBubbleCD() "[zarya/self_bubble.opy]: showSelfBubbleCD()"
{
    CreateInWorldText(EventPlayer(), <"<0>", RoundToInteger(self_bubble_cooldown, Rounding.Up)>, UpdateEveryFrame(EyePosition(EventPlayer()) + 100 * (1.99 * WorldVectorOf(Right(), EventPlayer(), LocalVector.Rotation) + -1.64 * DirectionFromAngles(HorizontalAngleFromDirection(FacingDirectionOf(EventPlayer())), VerticalAngleFromDirection(FacingDirectionOf(EventPlayer())) - 90) + 3 * FacingDirectionOf(EventPlayer()))), 3, Clipping.DoNotClip, InworldTextRev.VisibleToPositionStringAndColor, Color.White, Spectators.DefaultVisibility);
    self_bubble_cd_text = LastTextID();
    ModifyVariable(text_huds, Operation.AppendToArray, self_bubble_cd_text);
}

void hideSelfBubbleCD() "[zarya/self_bubble.opy]: hideSelfBubbleCD()"
{
    DestroyInWorldText(self_bubble_cd_text);
    ModifyVariable(text_huds, Operation.RemoveFromArrayByValue, self_bubble_cd_text);
}

rule: "[zarya/self_bubble.opy]: OW1 zarya self bubble cooldown"
Event.OngoingPlayer
Player.Zarya
if (IsUsingAbility1(EventPlayer()) == true)
{
    SetAbilityCharge(EventPlayer(), Button.Ability1, 2);
    SetAbility1Enabled(EventPlayer(), false);
    # 2 second bubble duration
    Wait(2, WaitBehavior.IgnoreCondition);
    self_bubble_cooldown = 10;
    ChaseVariableAtRate(self_bubble_cooldown, 0, 1, RateChaseReevaluation.None);
}

rule: "[zarya/self_bubble.opy]: Disable self bubble if on cooldown"
Event.OngoingPlayer
Player.Zarya
if (self_bubble_cooldown > 0)
{
    SetAbility1Enabled(EventPlayer(), false);
}

rule: "[zarya/self_bubble.opy]: Enable self bubble if not on cooldown"
Event.OngoingPlayer
Player.Zarya
if (self_bubble_cooldown <= 0)
{
    SetAbility1Enabled(EventPlayer(), true);
}

rule: "[zarya/self_bubble.opy]: Show self bubble cooldown"
Event.OngoingPlayer
if (self_bubble_cooldown > 0)
{
    showSelfBubbleCD();
}

rule: "[zarya/self_bubble.opy]: Erase self bubble cooldown"
Event.OngoingPlayer
if (self_bubble_cooldown <= 0)
{
    hideSelfBubbleCD();
}

rule: "[zarya/ally_bubble.opy]: Initialize ally bubble ability"
Event.OngoingPlayer
Player.Zarya
# without this flag, the reset code in generic.opy executes after initialization
if (call_init == true)
{
    ally_bubble_cooldown = 0;
}

rule: "[zarya/ally_bubble.opy]: Remove ally bubble HUD"
Event.OngoingPlayer
if (last_hero_played == Hero.Zarya)
if (call_reset == true)
{
    hideAllyBubbleCD();
}

void showAllyBubbleCD() "[zarya/ally_bubble.opy]: showAllyBubbleCD()"
{
    CreateInWorldText(EventPlayer(), <"<0>", RoundToInteger(ally_bubble_cooldown, Rounding.Up)>, UpdateEveryFrame(EyePosition(EventPlayer()) + 100 * (2.3 * WorldVectorOf(Right(), EventPlayer(), LocalVector.Rotation) + -1.66 * DirectionFromAngles(HorizontalAngleFromDirection(FacingDirectionOf(EventPlayer())), VerticalAngleFromDirection(FacingDirectionOf(EventPlayer())) - 90) + 3 * FacingDirectionOf(EventPlayer()))), 3, Clipping.DoNotClip, InworldTextRev.VisibleToPositionStringAndColor, Color.White, Spectators.DefaultVisibility);
    ally_bubble_cd_text = LastTextID();
    ModifyVariable(text_huds, Operation.AppendToArray, ally_bubble_cd_text);
}

void hideAllyBubbleCD() "[zarya/ally_bubble.opy]: hideAllyBubbleCD()"
{
    DestroyInWorldText(ally_bubble_cd_text);
    ModifyVariable(text_huds, Operation.RemoveFromArrayByValue, ally_bubble_cd_text);
}

rule: "[zarya/ally_bubble.opy]: OW1 zarya ally bubble cooldown"
Event.OngoingPlayer
Player.Zarya
if (IsUsingAbility2(EventPlayer()) == true)
{
    SetAbilityCharge(EventPlayer(), Button.Ability2, 2);
    SetAbility2Enabled(EventPlayer(), false);
    # 2 second bubble duration
    Wait(2, WaitBehavior.IgnoreCondition);
    ally_bubble_cooldown = 8;
    ChaseVariableAtRate(ally_bubble_cooldown, 0, 1, RateChaseReevaluation.None);
}

rule: "[zarya/ally_bubble.opy]: Disable ally bubble if on cooldown"
Event.OngoingPlayer
Player.Zarya
if (ally_bubble_cooldown > 0)
{
    SetAbility2Enabled(EventPlayer(), false);
}

rule: "[zarya/ally_bubble.opy]: Enable ally bubble if not on cooldown"
Event.OngoingPlayer
Player.Zarya
if (ally_bubble_cooldown <= 0)
{
    SetAbility2Enabled(EventPlayer(), true);
}

rule: "[zarya/ally_bubble.opy]: Show ally bubble cooldown"
Event.OngoingPlayer
if (ally_bubble_cooldown > 0)
{
    showAllyBubbleCD();
}

rule: "[zarya/ally_bubble.opy]: Erase ally bubble cooldown"
Event.OngoingPlayer
if (ally_bubble_cooldown <= 0)
{
    hideAllyBubbleCD();
}
